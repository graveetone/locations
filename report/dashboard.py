import altair
import streamlit as st
import pandas as pd

from utils.flows import compose_row
from utils.constants import (
    APPS_TITLES, IMAGE_PATH, SEED_PARAMS, REQUESTS_TITLES, TABLE_HEADERS)

st.set_page_config(page_title='Locations App Report',
                   page_icon="üìç",
                   layout="wide",
                   initial_sidebar_state="expanded"
                   )

#  side_bar_with_controls

st.sidebar.header("–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")

apps = st.sidebar.multiselect(
    label="–î–æ–¥–∞—Ç–∫–∏",
    options=APPS_TITLES,
    key="APPS",
    default=APPS_TITLES
)

seed_params = st.sidebar.multiselect(
    label='–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—ñ–¥—É–≤–∞–Ω–Ω—è –±–∞–∑–∏',
    options=SEED_PARAMS,
    key="SEED_PARAMS",
    default=SEED_PARAMS
)

requests = st.sidebar.multiselect(
    label='–í–µ–±—Å–æ–∫–µ—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏',
    options=REQUESTS_TITLES,
    key="REQUESTS",
    default=REQUESTS_TITLES
)

admin_panel = st.sidebar.toggle("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")
method = 'log'
degree = 0

show_approximation = st.sidebar.toggle(
    "–ê–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—è", value=False)


method = st.sidebar.selectbox('–ú–µ—Ç–æ–¥ –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—ó', options=[
                                  'linear', 'log', 'exp', 'pow', 'quad', 'poly'])
show_table = st.sidebar.toggle("–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é")

if all((apps, seed_params, requests)):
    all_apps_data_df = pd.DataFrame(columns=TABLE_HEADERS)

    plots = [
        "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤",
        "APDEX —ñ–Ω–¥–µ–∫—Å",
        "–†–æ–∑–º—ñ—Ä –±–∞–∑–∏",
        "–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
        "–ü—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å"
    ]

    for app in apps:
        rows = [compose_row(app, param, requests=requests)
                for param in seed_params]
        app_df = pd.DataFrame(rows, columns=TABLE_HEADERS)
        all_apps_data_df = pd.concat([all_apps_data_df, app_df])

    for plot in plots:
        st.subheader(plot)
        if show_approximation:
            scatter = altair.Chart(all_apps_data_df).mark_point(size=60).encode(
                x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫', y=plot, color='–î–æ–¥–∞—Ç–æ–∫', tooltip=TABLE_HEADERS).interactive()

            approximation = scatter.transform_regression('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫', plot, groupby=[
                                                         '–î–æ–¥–∞—Ç–æ–∫'], method=method, order=degree).mark_line()
            figure = scatter + approximation
        else:
            lines = altair.Chart(all_apps_data_df).mark_line().encode(
                x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫', y=plot, color='–î–æ–¥–∞—Ç–æ–∫', tooltip=TABLE_HEADERS).interactive()
            figure = lines

        st.altair_chart(figure, use_container_width=True)
    if show_table:
        st.table(all_apps_data_df)
else:
    st.header('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤')
    st.image(str(IMAGE_PATH), width=500)
