import streamlit as st
import altair
import pandas as pd
import numpy as np
from scipy.optimize import curve_fit

from utils.constants import (
    APPS_TITLES, SEED_PARAMS, REQUESTS_TITLES, IMAGE_PATH, TABLE_HEADERS)
from utils.flows import compose_row


st.set_page_config(page_title='Locations App Report',
                   page_icon="üìç",
                   layout="wide",
                   initial_sidebar_state="expanded"
                   )

st.sidebar.header("–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")

apps = st.sidebar.multiselect(
    label="–î–æ–¥–∞—Ç–∫–∏",
    options=APPS_TITLES,
    key="APPS",
    default=APPS_TITLES
)

seed_params = st.sidebar.multiselect(
    label='–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—ñ–¥—É–≤–∞–Ω–Ω—è –±–∞–∑–∏',
    options=SEED_PARAMS,
    key="SEED_PARAMS",
    default=SEED_PARAMS
)

requests = st.sidebar.multiselect(
    label='–í–µ–±—Å–æ–∫–µ—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏',
    options=REQUESTS_TITLES,
    key="REQUESTS",
    default=REQUESTS_TITLES
)

show_approximation = st.sidebar.toggle(
    "–ê–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—è", value=False)

show_table = st.sidebar.toggle("–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é")


if all((apps, seed_params, requests)):
    all_apps_data_df = pd.DataFrame(columns=TABLE_HEADERS)

    plots = [
        {
            "field": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤",
            "title": '–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫',
            "approximation": "y = a log^2 x + b log x + c"
        },
        {
            "field": "–†–æ–∑–º—ñ—Ä –±–∞–∑–∏",
            "title": '–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—É –±–∞–∑–∏ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫',
            "approximation": "y = ax + b"
        },
        {
            "field": "–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
            "title": '–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫',
            "approximation": "y = ax^b + c"
        },
        {
            "field": "–ü—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å",
            "title": '–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫',
            "approximation": "y = a log^2 x + b log x + c"
        }
    ]

    for app in apps:
        rows = [compose_row(app, param, requests=requests)
                for param in seed_params]
        app_df = pd.DataFrame(rows, columns=TABLE_HEADERS)
        all_apps_data_df = pd.concat([all_apps_data_df, app_df])

    for plot in plots:
        st.subheader(plot['title'])
        if show_approximation:
            app_to_approximate = st.selectbox(
                label="–î–æ–¥–∞—Ç–æ–∫", options=apps, key=f"app {plot['field']}")
            app_df = all_apps_data_df[all_apps_data_df["–î–æ–¥–∞—Ç–æ–∫"]
                                      == app_to_approximate]

            scatter = altair.Chart(app_df).mark_point(size=60).encode(
                x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫', y=plot['field'], color='–î–æ–¥–∞—Ç–æ–∫', tooltip=TABLE_HEADERS).interactive()

            figure = scatter

            FUNCTIONS = {
                "y = ax + b": lambda x, a, b, c: a * np.array(x) + b,
                "y = a log^2 x + b log x + c": lambda x, a, b, c: a * np.log(x)**2 + b * np.log(x) + c,
                "y = ax^b + c": lambda x, a, b, c: a * np.power(x, b) + c,
                "y = ax^2 + bx + c": lambda x, a, b, c: a*(np.array(x)**2) + b*np.array(x) + c
            }

            func = st.selectbox(label='–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—ó',
                                key=f"func for {plot['field']}",
                                options=list(FUNCTIONS.keys()),
                                index=list(FUNCTIONS.keys()).index(plot['approximation']))  # plot['approximation']['method']
            if func:
                func = FUNCTIONS.get(func)
                x, y = list(app_df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫"]), list(
                    app_df[plot['field']])

                popt, pcov = curve_fit(func, x, y)
                a, b, c = tuple(popt)

                residuals = y - func(x, a, b, c)
                tss = np.sum((y - np.mean(y))**2)
                rss = np.sum(residuals**2)
                r_squared = 1 - (rss / tss)

                st.subheader(f"R-squared: {r_squared}")

                regression_df = pd.DataFrame(columns=['x', 'y'])

                regression_df['x'] = np.linspace(min(x), max(x), 100)
                regression_df['y'] = func(regression_df['x'], *popt)
                lines = altair.Chart(regression_df).mark_line().encode(
                    x='x', y='y').interactive()
                figure = figure + lines
        else:
            scatter = altair.Chart(all_apps_data_df).mark_point(size=60).encode(
                x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫', y=plot['field'], color='–î–æ–¥–∞—Ç–æ–∫', tooltip=TABLE_HEADERS).interactive()
            lines = altair.Chart(all_apps_data_df).mark_line().encode(
                x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫', y=plot['field'], color='–î–æ–¥–∞—Ç–æ–∫', tooltip=TABLE_HEADERS).interactive()
            figure = scatter + lines

        st.altair_chart(figure, use_container_width=True)
    if show_table:
        st.table(all_apps_data_df)

else:
    st.header('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤')
    st.image(str(IMAGE_PATH), width=500)
